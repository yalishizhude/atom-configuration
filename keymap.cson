# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth

# If you're having trouble with your keybindings not working, try
# Keybinding Resolver: `Cmd+.` on OS X and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * https://atom.io/docs/latest/hacking-atom-debugging#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'atom-text-editor:not([mini])':
  'ctrl-shift-M': 'markdown-preview-plus:toggle'

'atom-text-editor.vim-mode.visual-mode':
  'ctrl-v': 'core:paste'

'atom-text-editor.vim-mode':
  'ctrl-c': 'core:copy'

'atom-text-editor.vim-mode.insert-mode':
  'ctrl-e': 'emmet:expand-abbreviation'
  'ctrl-w': 'core:close'
  'ctrl-f': 'native!'
  'ctrl-y': 'native!'

'atom-text-editor.vim-mode.normal-mode':
  'ctrl-a': 'core:select-all'
  'ctrl-v': 'core:paste'
  'ctrl-f': 'native!'
  'ctrl-y': 'native!'

'atom-text-editor.vim-mode:not(.insert-mode)':
  'ctrl-f': 'native!'
  'ctrl-d': 'native!'
